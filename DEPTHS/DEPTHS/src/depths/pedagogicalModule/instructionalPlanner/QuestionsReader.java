/* Generated by Together */

package depths.pedagogicalModule.instructionalPlanner;

import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import javax.xml.parsers.*;

public class QuestionsReader extends DefaultHandler{
 private DiscoursePlanner discoursePlanner;
 private CharArrayWriter contents = new CharArrayWriter();
 private SAXParser parser;
 private String uri;
 private String currConceptID;

 private boolean inConceptGeneralInformation = false;
 private boolean inUnitGeneralInformation = false;
 private boolean inQuestions = false;
 private boolean inFragment = false;
 private boolean inTestGeneralInformation = false;
 private boolean inCurrentConcept=false;
 private LOM_reader_Mgr lomReaderMgr;


 private boolean inRequestedConcept = false;
 private ProcedureSelector pSel;

 public QuestionsReader(SAXParser parser, DiscoursePlanner dp,
                    String uri, LOM_reader_Mgr lp,String currConcId,ProcedureSelector ps) {
   this.parser = parser;
   this.uri = uri;
   discoursePlanner = dp;
   this.currConceptID=currConcId;
   pSel=ps;

 }

 public void startDocument() throws SAXException {
 }

 public void endDocument() throws SAXException {
 }

 public void startElement(String namespaceURI,
                          String localName,
                          String qName,
                          Attributes attr) throws SAXException {
   contents.reset();
   if (qName.equals("LOM")) {
   }
   if (qName.equals("Concept")) {
   }
   if (qName.equals("Unit")){

   }
   if (qName.equals("conceptGeneralInformation")) {
     inConceptGeneralInformation = true;
   }
   if (qName.equals("unitGeneralInformation")) {
     inUnitGeneralInformation = true;
   }
   if (qName.equals("Questions")) {
     if (inCurrentConcept){
       inQuestions = true;
       //ovde dodati kod koji signalizira da treba kreirati novo pitanje


     }

   }
   if (qName.equals("Fragment")) {
     inFragment = true;
   }
 }

 public void endElement(String namespaceURI,
                        String localName,
                        String qName) throws SAXException {
   if (qName.equals("Concept")) {
     if (inCurrentConcept){
       inCurrentConcept=false;
     }

   }
   if (qName.equals("identifier")) {
     if (inConceptGeneralInformation){
       if (contents.toString().equals(currConceptID)){

         inCurrentConcept=true;
       }
     }
     if (inQuestions){
       pSel.setQuestId(contents.toString());

     }

   }
   if (qName.equals("title")) {

   }
   if (qName.equals("group")) {
     if (inQuestions){
       pSel.setQuestGroup(Integer.parseInt(contents.toString()));

     }

   }
   if (qName.equals("difficultyLevel")) {
     if (inQuestions){
       pSel.setQuestDiffLev(Integer.parseInt(contents.toString()));

     }

     }


   if (qName.equals("detailLevel")) {

   }
   if (qName.equals("ordinalNumber")) {

   }
   if (qName.equals("related-to")) {
     if (inQuestions){
       pSel.setQuestionRelatedTo(contents.toString());

     }

   }
   if (qName.equals("Unit")){

   }
   if (qName.equals("Questions")){
     if (inCurrentConcept){
       inQuestions = false;
       pSel.endQuestion();

       //ovde ubaciti kod koji ce da signalizira da je pitanje gotovo
       //i da pocne obradu
     }

   }

   ///////////////////////////
   if (qName.equals("conceptGeneralInformation")) {
     inConceptGeneralInformation = false;
   }
   if (qName.equals("unitGeneralInformation")) {
     inUnitGeneralInformation = false;
   }
   if (qName.equals("inQuestions")) {
     inQuestions = false;
   }
   if (qName.equals("Fragment")) {
     inFragment = false;
   }
 }

 public void characters(char[] ch, int start, int length) throws SAXException {
   contents.write(ch, start, length);
 }
}


