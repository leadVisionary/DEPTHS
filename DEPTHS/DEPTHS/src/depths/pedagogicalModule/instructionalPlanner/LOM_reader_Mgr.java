/* Generated by Together */

package depths.pedagogicalModule.instructionalPlanner;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import java.io.*;

import javax.xml.parsers.*;
import org.xml.sax.SAXException;

public class LOM_reader_Mgr {
  private DiscoursePlanner discoursePlanner;
  private SAXParserFactory parserFactory;
  private SAXParser parser;
  private LOM_Reader xmlreaderInstance;

  private UnitsReader uReader;
  private QuestionsReader qReader;
  private FragmentsReader fReader;
  private String uri;
  private int requestedID = 0;
  private LessonSelector lSel;
  private FragmentsSelector fSel;
  public LOM_reader_Mgr(DiscoursePlanner dp,LessonSelector ls, String rRef) {
    discoursePlanner = dp;
    lSel=ls;
    uri = rRef;
    runParser();
  }
  public void setFSelReference(FragmentsSelector fs){
    fSel=fs;
  }
  public void runParser() {
    try {
      parserFactory = SAXParserFactory.newInstance();
      parserFactory.setValidating(false);
      parserFactory.setNamespaceAware(false);
      parser = parserFactory.newSAXParser();
      xmlreaderInstance = new LOM_Reader(parser, discoursePlanner, uri,
                                         requestedID, this);
      parser.parse(uri, xmlreaderInstance);
      requestedID++;
    }
    catch (IOException ex) {
      ex.printStackTrace();
    }
    catch (ParserConfigurationException ex) {
      ex.printStackTrace();
    }
    catch (SAXException ex) {
      ex.printStackTrace();
    }
    catch (FactoryConfigurationError ex) {
      ex.printStackTrace();
    }
  }
  /**pokrece parser za ucitavanje Unita*/
  public void runUnitsReaderParser(String rID) {
   try {

     parserFactory = SAXParserFactory.newInstance();
     parserFactory.setValidating(false);
     parserFactory.setNamespaceAware(false);
     parser = parserFactory.newSAXParser();
     uReader = new UnitsReader(parser, discoursePlanner,lSel, uri,rID,this);
     parser.parse(uri, uReader);

   }
   catch (IOException ex) {
     ex.printStackTrace();
   }
   catch (ParserConfigurationException ex) {
     ex.printStackTrace();
   }
   catch (SAXException ex) {
     ex.printStackTrace();
   }
   catch (FactoryConfigurationError ex) {
     ex.printStackTrace();
   }
 }
 /**Kreira parser za citanje pitanja*/
public void createQuestionReaderParser(String currConcID,ProcedureSelector pSel){
   try {
     parserFactory = SAXParserFactory.newInstance();
     parserFactory.setValidating(false);
     parserFactory.setNamespaceAware(false);
     parser = parserFactory.newSAXParser();
     qReader=new QuestionsReader(parser, discoursePlanner,uri,this,currConcID,pSel);
     parser.parse(uri, qReader);
   }
   catch (IOException ex) {
     ex.printStackTrace();
   }
   catch (ParserConfigurationException ex) {
     ex.printStackTrace();
   }
   catch (SAXException ex) {
     ex.printStackTrace();
   }
   catch (FactoryConfigurationError ex) {
     ex.printStackTrace();
   }
}
/**Kreira parser za citanje Fragmenata*/
 public void createFragmentsReaderParser(String currConcID) {
   try {
     parserFactory = SAXParserFactory.newInstance();
     parserFactory.setValidating(false);
     parserFactory.setNamespaceAware(false);
     parser = parserFactory.newSAXParser();
     fReader = new FragmentsReader(parser, discoursePlanner,fSel, uri,currConcID,this);
   }
   catch (ParserConfigurationException ex) {
     ex.printStackTrace();
   }
   catch (SAXException ex) {
     ex.printStackTrace();
   }
   catch (FactoryConfigurationError ex) {
     ex.printStackTrace();
   }
 }
 /**Pokrece parser za citanje Fragmenata*/
 public void runFragmentsReaderParser(String currUnitID){
   try{

     fReader.setCurrentUnitID(currUnitID);
     parser.parse(uri, fReader);

   }
   catch (IOException ex) {
     ex.printStackTrace();
   }
   catch(SAXException ex){
     ex.printStackTrace();
   }

 }

  public void restartCNumbering() {
    requestedID = 0;
  }
}
