/* Generated by Together */

package depths.pedagogicalModule.studentAssessment;

import depths.pedagogicalModule.Course;
import depths.pedagogicalModule.studentAssessment.charts.*;

public class StudentModelAssessment {

  private LocalAssessment locAssess;
  private GlobalAssessment globAssess;
  private Course course;
  private double  actualSkillLevel;
  private double initialSkillLevel;
  private ConceptHitChart conceptHitChart;
  private ConceptChartDataSet conceptChartDataS;

  public StudentModelAssessment(Course c,double initSkLev){
    initialSkillLevel=initSkLev;
    locAssess=new LocalAssessment(this);
    globAssess=new GlobalAssessment(this,initialSkillLevel);
    course=c;

    //conceptHitChart.setRefToStudModelAssessment(this);

  }
  public void setChartsRef(ConceptHitChart conceptHitChart){
    conceptHitChart=conceptHitChart;
    conceptHitChart.sendSmAssessRef(this);

  }

  //preuzima vektor sa nazivima koncepata za chart dijagram
 public String[] getConceptsTitles(){
   String[] concepts=course.getConceptsTitles();
   return concepts;
 }
 //preuzima vektor sa ocenama koncepata za chart dijagram
public double[] getConceptsDegrees(){
  double[] degrees = course.getConceptsDegrees();
  return degrees;
}
//preuzima vektor sa trenutnim znanjem u toku ucenja  koncepata za chart dijagram
public double[] getActualKnowledgeLevel(){
  double[] actKnowlLevel = course.getActualKnowledgeLevel();
  return actKnowlLevel;
}


  public void sendStudentAnswerFromDM(
                  String questId,String questContent,int studAnswer,
                  int indexOfTruthAnsw,String textOfTruthAnsw,String qRelatedTo,int qGroup,
                  int questionDifficultyLevel, int optTimeToSolveQuest){
          locAssess.sendStudentAnswerFromDM(questId, questContent,studAnswer,indexOfTruthAnsw,textOfTruthAnsw,qRelatedTo,qGroup, questionDifficultyLevel,
              optTimeToSolveQuest);

          }
  public void cleanStudAnswVector(){
    locAssess.cleanStudAnswVector();
  }
  public void signalEndOfSendingStudentAnswers(int duration){
    locAssess.signalEndOfSendingStudentAnswers(duration);
  }
  public void sendFeedbackText(double testKnowledgeLevel,double sendFeedbackText,double testSuccess,String mainTestMessage,
                               int numOfQuest,int numOfWrongAnsw, int testDuration, double testPointsNumber){
    course.sendFeedbackText(testKnowledgeLevel,sendFeedbackText,testSuccess,mainTestMessage,numOfQuest,numOfWrongAnsw,testDuration,testPointsNumber);
  }
  /**Vraca tekst pitanja na koje je student netacno odgovorio.
    * Kao parametar se prosledjuje redni broj pitanja*/
   public String getWrongQuestContent(int ordNum){
     String cont=locAssess.getWrongQuestContent(ordNum);
     return cont;
   }
   /**Vraca tacan odgovor na pitanje koje student nije tacno
    * odgovorio. Kao parametar se prosledjuje redni broj pitanja*/
   public String getWrongQuestTruthAnswer(int ordNum){
     String answ=locAssess.getWrongQuestTruthAnswer(ordNum);
     return answ;
   }
   /**Pronalazi ID lekcije koju student treba da ponovi*/
   public String  getLessonToReLearn(int ordNum){
      String lessId=locAssess.getLessonToReLearn(ordNum);
    return lessId;

  }
  /**Vraca broj dodatnih lekcija koje je Tutor preporucio studentu*/
 public int getNumbOfAdditionalLessons(){
   int numb=locAssess.getNumbOfAdditionalLessons();
   return numb;
 }
 /**pronalazi ID dodatne lekcije*/
  public String getAdditLessId(int ordNum){
    String lessId=locAssess.getAdditLessId(ordNum);
    return lessId;
  }
  /**Vraca broj netacnih pitanja kako bi se napravio novi Procedure Set*/
 public int getNumberOfWrongAnswers(){
   int qNum=locAssess.getNumberOfWrongAnswers();
   return qNum;
 }
 /**Vraca grupu pogresno odgovorenog pitanja na osnovu
  * rednog broja netacnog pitanja*/
 public int getWrongQuestionGroup(int ordNum){
   int qGroup=locAssess.getWrongQuestionGroup(ordNum);
   return qGroup;
 }
 public void setStudActualSkillLevel(double actSkLev){
   actualSkillLevel=actSkLev;
   globAssess.setActualSkillLevel(actSkLev);
 }
 /**Salje signal u model studenta da kreira novu instancu testa*/
 public void startTestInSM(){
   course.startTestInSM();
 }
 /**Dodaje podatke o odredjenom pitanju iz testa u model studenta*/
 public void addQuestionToSM(String qId,int qGroup,boolean qTruth){
   course.addQuestionToSM(qId,qGroup,qTruth);
 }
 /**Salje ocenu testa i trenutni stepen znanja studenta u model studenta*/
 public void setTestElementsInSM(double testKnowledgeLevel, double testDifficultyFactor,double success, double testPointsNumber){
   globAssess.addTestMark(testKnowledgeLevel);
   course.setTestElementsInSM(testKnowledgeLevel,testDifficultyFactor,actualSkillLevel, success, testPointsNumber);
 }
 /**Poziva procenu znanja studenta za predjeni koncept */
   public void startConceptAssessment(){

     globAssess.startConceptAssessment();
   }

   public void signalNewConcept(){
     globAssess.cleanTestVector();
   }
   /**Poziva se iz klase GlobalAssessment u slucaju da se perfomanse studenta
    * promene. Vrsi ponovno planiranje instrukcionog plana i menja atribut
    * actualSkillLevel*/
   public void changeConceptPlan(double actualSkillLevel){

     this.actualSkillLevel=actualSkillLevel;
     course.changeStudentActualSkillLevel(actualSkillLevel);

   }
   /**Salje ocenu za odredjeno poglavlje u klasu GlobalAssessment,
    * radi dobijanja prosecne ocene*/
   public void sendConceptMarkInPedMod(double mark){
     globAssess.addTestMark(mark);

   }
   /**Salje podatke o upravo zavrsenom konceptu u model studenta*/
   public void sendConceptDataToSM(double currConceptDegree,double studSkillLevel){
     course.sendConceptDataToSM(currConceptDegree,studSkillLevel);
   }
   public int getNumberOfQuestInTest(int i){
     int qNumb=course.getNumberOfQuestInTest(i);
     return qNumb;
   }
   public double getTestDegreeByOrdNum(int i){
     double degreeT=course.getTestDegreeByOrdNum(i);
     return degreeT;
   }
   public int getNumberOfTests(){
     int numb=course.getNumberOfTests();
     return numb;
   }








}
