/* Generated by Together */

package depths.pedagogicalModule.studentAssessment;
import java.util.Vector;

public class LocalAssessment {

    private String conceptKnowledgeLevel;
    private double testKnowledgeLevel;
    private double testDifficultyFactor=0.0;
    private StudentModelAssessment studModAssess;
    private Vector studAnswers;
    private StudentAnswer currAnswer;
    private int numOfCorrectAnsw=0;
    private int numOfWrongAnsw=0;
    private int numOfQuest=0;
    private Vector lessonsToReLearn=new Vector();
    private String mainTestMessage;
    private FuzzyReasoner fr;
    private int testDuration;
    private double success;
    private int optTimeToSolveTest;
    private double testPointsNumber=0.0;

    public LocalAssessment(StudentModelAssessment sma){
      studModAssess=sma;
      studAnswers=new Vector();

    }
    /**Ubacuje odgovor studenta u pedagoski model*/
    public void  sendStudentAnswerFromDM(
                  String questId,String questContent,int studAnswer,
                  int indexOfTruthAnsw,String textOfTruthAnsw,String qRelatedTo,int qGroup,
                  int questionDifficultyLevel, int optTimeToSolveQuest ){
    currAnswer=new StudentAnswer();
    currAnswer.setQuestionId(questId);
    currAnswer.setStudentAnswerIndex(studAnswer);
    currAnswer.setTruthAnswerIndex(indexOfTruthAnsw);
    currAnswer.setTextOfTruthAnswer(textOfTruthAnsw);
    currAnswer.setRelatedTo(qRelatedTo);
    currAnswer.setQuestionContent(questContent);
    currAnswer.setQuestionGroup(qGroup);
    currAnswer.setDifficultyLevel(questionDifficultyLevel);
    currAnswer.setOptTimeToSolve(optTimeToSolveQuest);


    if (studAnswer==indexOfTruthAnsw){
      currAnswer.setCorrectness(true);
    }else{
      currAnswer.setCorrectness(false);
    }

    studAnswers.add(currAnswer);
    }

    /**Poziva se neposredno pre testiranja kako bi ocistio vektor
     * od odgovora za prethodni koncept*/
    public void cleanStudAnswVector(){
      studAnswers.removeAllElements();
      lessonsToReLearn.removeAllElements();
    }
    /**Metoda kojom se iz JSP strane signalizira da je zavrseno prosledjivanje
     * svih odgovora studenta u pedagoski modul*/
    public void signalEndOfSendingStudentAnswers(int duration){
      this.setTestDuration(duration);
      this.countCorrectAnswers();
      this.countTestFactors();
      this.countTestKnowledgeLevel();
      this.evaluateMainTestMessage(testKnowledgeLevel);
      studModAssess.sendFeedbackText(testKnowledgeLevel,testDifficultyFactor,this.success,mainTestMessage,numOfQuest,numOfWrongAnsw,this.getTestDuration(),this.testPointsNumber);
      sendTestToStudentModel();

  }
  /**Salje podatke o upravo zavrsenom testu u model studenta*/
  public void sendTestToStudentModel(){
    studModAssess.startTestInSM();
    for (int i=0;i<numOfQuest;i++){
      StudentAnswer sa = (StudentAnswer) studAnswers.get(i);
      String qId=sa.getQuestionId();
      int qGr=sa.getQuestionGroup();
      boolean qTruth=sa.isCorrectness();
      studModAssess.addQuestionToSM(qId,qGr,qTruth);
    }
    studModAssess.setTestElementsInSM(testKnowledgeLevel,testDifficultyFactor,this.success,this.testPointsNumber);
  }
  //Izracunava vreme potrebno za resavanje testa i tezinski faktor testa
  public void countTestFactors(){
    double testDifficultyTemp=0.0;
    int optTestTimeTemp=0;
    double testSuccessTemp=0.0;
    double tempSucc=0.0, tempDiff=0.0;

    for (int i=0;i<studAnswers.size();i++){
      StudentAnswer sa=(StudentAnswer) studAnswers.get(i);
      testDifficultyTemp=testDifficultyTemp+(sa.getDifficultyLevel()*20);
      optTestTimeTemp=optTestTimeTemp+sa.getOptTimeToSolve();//vreme koje se smatra optimalnim za resavanje testa
      tempDiff=tempDiff+(sa.getDifficultyLevel()*20);
      if(sa.isCorrectness()){
        tempSucc = tempSucc + (sa.getDifficultyLevel() * 20);
      }else{ }
    }
    this.setOptTimeToSolveTest(optTestTimeTemp);
    testSuccessTemp=((tempSucc/tempDiff)*100);
    //if (testSuccessTemp<0.06){
      //ovo zbog toga da u fuzzyreasoneru ne bi bila negativna vrednost
      //testSuccessTemp=testSuccessTemp+0.06;
    //}

    this.setSuccess(testSuccessTemp);
    testDifficultyTemp=testDifficultyTemp/studAnswers.size();

    testDifficultyFactor=testDifficultyTemp;
    testPointsNumber=(testDifficultyFactor*this.getSuccess())/100;

  }
  public void countCorrectAnswers(){
    numOfQuest=studAnswers.size();
    numOfCorrectAnsw=0;
    numOfWrongAnsw=0;
    for (int i=0;i<numOfQuest;i++){
      StudentAnswer sa=(StudentAnswer) studAnswers.get(i);
      if (sa.isCorrectness()==true){
        numOfCorrectAnsw++;
      }else{
        numOfWrongAnsw++;
        String lessId=sa.getRelatedTo();
        this.setLessonToReLearn(lessId);
      }

    }

  }
  /**Kreira plan lekcija koje treba ponoviti*/
  public void setLessonToReLearn(String lessId){

    lessonsToReLearn.add(lessId);
  }

  /**Izracunava ocenu upravo zavrsenog testa*/
  public void countTestKnowledgeLevel(){
    fr=new FuzzyReasoner();

    fr.init(this.getOptTimeToSolveTest());

    //ovde treba uneti procenu vremena za resavanje testa
    double result=fr.run(this.testDuration,this.getSuccess(),this.testDifficultyFactor);

    //Ovaj deo treba zameniti

    int percent=(numOfCorrectAnsw*100)/numOfQuest;

    testKnowledgeLevel=  result;

    //if (testKnowledgeLevel==0){
      //testKnowledgeLevel=1;
    //}

    //


  }
  public void evaluateMainTestMessage(double testKnowledgeLevel){
if(testKnowledgeLevel<1.50){
  mainTestMessage="You must give more effort !";
}else if(testKnowledgeLevel<2.50){
  mainTestMessage="Not bad, but you could it better !";
}else if(testKnowledgeLevel<3.50){
  mainTestMessage="Good !";
}else if(testKnowledgeLevel<4.50){
  mainTestMessage="Very Good !";
}else if(testKnowledgeLevel<5.00){
  mainTestMessage="Excellent, you got an excellent score !";
}else if(testKnowledgeLevel>5.00){
  mainTestMessage="Congratulations, you are an expert in this !";
}




  }
  /**Vraca tekst pitanja na koje je student netacno odgovorio.
    * Kao parametar se prosledjuje redni broj pitanja*/
   public String getWrongQuestContent(int ordNum){
     String cont=new String();
     int counter=0;
     for (int i=0;i<numOfQuest;i++){
       StudentAnswer sa=(StudentAnswer)studAnswers.get(i);
       if (sa.isCorrectness()==false){
         counter++;
         if (counter==ordNum){
           cont=sa.getQuestionContent();
         }
       }
     }
     return cont;
   }
   /**Vraca broj netacnih pitanja kako bi se napravio novi Procedure Set*/
 public int getNumberOfWrongAnswers(){

   return numOfWrongAnsw;
 }

   /**Vraca tacan odgovor na pitanje koje student nije tacno
    * odgovorio. Kao parametar se prosledjuje redni broj pitanja*/
   public String getWrongQuestTruthAnswer(int ordNum){
     String answ=new String();
     int counter=0;
     for (int i=0;i<numOfQuest;i++){
       StudentAnswer sa=(StudentAnswer) studAnswers.get(i);
       if (sa.isCorrectness()==false){
         counter++;
         if (counter==ordNum){
           answ=sa.getTextOfTruthAnswer();
         }

       }

     }

     return answ;

   }
   /**Pronalazi ID lekcije koju student treba da ponovi*/
   public String  getLessonToReLearn(int ordNum){

    String lessId=lessonsToReLearn.get(ordNum).toString();

     return lessId;

   }
   /**Vraca broj dodatnih lekcija koje je Tutor preporucio studentu*/
 public int getNumbOfAdditionalLessons(){
   int numb=lessonsToReLearn.size();
   return numb;
 }
 /**pronalazi ID dodatne lekcije*/
  public String getAdditLessId(int ordNum){
    String lessId=lessonsToReLearn.get(ordNum).toString();
    return lessId;
  }
  /**Vraca grupu pogresno odgovorenog pitanja na osnovu
  * rednog broja netacnog pitanja*/
 public int getWrongQuestionGroup(int ordNum){
   int qGroup=0;
    int counter=0;
    for (int i=0;i<numOfQuest;i++){
      StudentAnswer sa=(StudentAnswer)studAnswers.get(i);

      if (sa.isCorrectness()==false){

        if (counter==ordNum){
          qGroup = sa.getQuestionGroup();

        }
        counter++;
        }
      }


   return qGroup;
 }

 public int getTestDuration(){
    return testDuration;
  }

 public void setTestDuration(int testDuration){
     this.testDuration= testDuration;
   }

 public double getSuccess(){
    return success;
  }

 public void setSuccess(double success){
     this.success= success;
   }

 public int getOptTimeToSolveTest(){
    return optTimeToSolveTest;
  }

 public void setOptTimeToSolveTest(int optTimeToSolveTest){
     this.optTimeToSolveTest= optTimeToSolveTest;
   }
}
