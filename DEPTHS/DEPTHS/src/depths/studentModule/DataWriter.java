/* Generated by Together */

package depths.studentModule;
import java.sql.*;
import depths.utility.ConnectionPool;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;

public class DataWriter {
  private CallableStatement cs;
  private ConnectionPool pool=null;
   private SimpleDateFormat df=new SimpleDateFormat("yyyy.MM.dd G 'at' HH:mm:ss z");
          private Connection conn=null;
          private SessionManager sm;
  public DataWriter(SessionManager ref){
    sm=ref;

  }
  //Upisuje osnovne podatke o studentu u bazu podataka
  public void writeStudentData(Integer studID, String fName, String lName,String uName,String passw,String email,String addr,
                                     String city, int country, String organization, String webSite, String language){
         try  {
           pool=ConnectionPool.getConnectionPool();
           conn=pool.getConnection();
             cs=conn.prepareCall("{call spInsertStudentData(?,?,?,?,?,?,?,?,?,?,?,?)}");
             cs.setInt(1,studID.intValue());
             cs.setString(2,fName);
             cs.setString(3,lName);
             cs.setString(4,uName);
             cs.setString(5,passw);
             cs.setString(6,email);
             cs.setString(7,addr);
             cs.setString(8,city);
             cs.setInt(9,country);
             cs.setString(10,organization);
             cs.setString(11,webSite);
             cs.setString(12,language);
             cs.setString(5,passw);
             cs.executeQuery();
                    }
         catch (Exception ex)  {
                    ex.printStackTrace();

                        }
         finally
       {
          if(pool!=null)
            pool.release(conn);
       }
}
   public void writeInitialPerformances(int studId, double inSkLev,int detLev,String programmLang){
     try  {
           pool=ConnectionPool.getConnectionPool();
           conn=pool.getConnection();
             cs=conn.prepareCall("{call spInsertStudentInitialPerformances(?,?,?,?)}");
             cs.setInt(1,studId);
              cs.setDouble(2,inSkLev);
             cs.setInt(3,detLev);
             cs.setString(4,programmLang);
             cs.executeQuery();
                    }
         catch (Exception ex)  {
                    ex.printStackTrace();

                        }
         finally
       {
          if(pool!=null)
            pool.release(conn);
       }

   }
   //upisuje podatke o konceptu koji je student savladao
   public void writeConceptData(String courseId,int studId,String conceptID,int duration,
                                String feedbackMessage,Date started,Date finished,int numberOfPasses,
                                double degreeOfMast, double knowledgeLevel,
                                String experienceLev,String reasoningAb){
System.out.println("writeConceptData conceptID="+conceptID+" courseId="+courseId);
     try  {
          pool=ConnectionPool.getConnectionPool();
          conn=pool.getConnection();

          cs = conn.prepareCall(
          "{call spInsertConceptInCourseForStudent(?,?,?,?,?,?,?,?,?,?,?,?)}");
      cs.setInt(1, studId);
      cs.setString(2,conceptID);
      cs.setInt(3, duration);
      cs.setString(4, feedbackMessage);
      cs.setString(5, df.format(started));

      cs.setString(6, df.format(finished));
      cs.setInt(7, numberOfPasses);
      cs.setDouble(8,degreeOfMast);
      cs.setDouble(9,knowledgeLevel);
      cs.setString(10,experienceLev);
      cs.setString(11,reasoningAb);
      cs.setString(12,courseId);
      cs.executeQuery();
                   }
        catch (Exception ex)  {
                   ex.printStackTrace();

                       }
        finally
      {
         if(pool!=null)
           pool.release(conn);
      }
   }
   //azurira podatke o konceptu koji je student ponovo ucio
   public void updateConceptData(String courseId,int studId,String conceptID,int duration,
                                String feedbackMessage,Date started,Date finished,int numberOfPasses,
                                double degreeOfMast, double knowledgeLevel,
                                String experienceLev,String reasoningAb){
System.out.println("updateConceptData courseId="+courseId+" conceptID="+conceptID);
     try  {
          pool=ConnectionPool.getConnectionPool();
          conn=pool.getConnection();

          cs = conn.prepareCall(
          "{call spUpdateConceptInCourseForStudent(?,?,?,?,?,?,?,?,?,?,?,?)}");
      cs.setInt(1, studId);
      cs.setString(2,conceptID);
      cs.setInt(3, duration);
      cs.setString(4, feedbackMessage);
      cs.setString(5, df.format(started));

      cs.setString(6, df.format(finished));
      cs.setInt(7, numberOfPasses);
      cs.setDouble(8,degreeOfMast);
      cs.setDouble(9,knowledgeLevel);
      cs.setString(10,experienceLev);
      cs.setString(11,reasoningAb);
      cs.setString(12,courseId);
      cs.executeQuery();
                   }
        catch (Exception ex)  {
                   ex.printStackTrace();

                       }
        finally
      {
         if(pool!=null)
           pool.release(conn);
      }
   }



   //upisuje u bazu podataka performanse studenta
   public void writePerformance(){


     int studId=sm.getStudentId();
     double actSkLev=sm.getActualSkillLevel();
     String learnStyle=sm.getLearningStyle();
     Calendar currentTime=Calendar.getInstance();
     java.util.Date timeOfLastS=new java.util.Date();
     int detLev=sm.getDetailLevel();
     String experienceLev=sm.getExperienceLevel();
     String reasoningAb=sm.getReasoningAbility();
     String programmLang=sm.getProgrammLang();
     try  {
          pool=ConnectionPool.getConnectionPool();
          conn=pool.getConnection();

        cs = conn.prepareCall(
            "{call spInsertStudentPerformances(?,?,?,?,?,?,?,?)}");
        cs.setInt(1, studId);
        cs.setDouble(2, actSkLev);
        cs.setString(3, learnStyle);
        cs.setString(4, df.format(timeOfLastS));
        cs.setInt(5, detLev);
        cs.setString(6, experienceLev);
        cs.setString(7, reasoningAb);
        cs.setString(8, programmLang);

        cs.executeQuery();
      }
             catch (Exception ex)  {
                               ex.printStackTrace();

                             } finally
            {
               if(pool!=null)
                 pool.release(conn);
            }

   }
   //upisuje podatke o kursu koji je student zapoceo da izucava
   public void writeCourseData(int studId,  Date started, Date finished, int numberOfPasses,String courseId){

System.out.println("writeCourseData studId="+studId);
     try  {
          pool=ConnectionPool.getConnectionPool();
          conn=pool.getConnection();
          cs = conn.prepareCall(
          "{call spInsertStudentInCourse(?,?,?,?,?)}");
      cs.setInt(1, studId);
      cs.setString(2, df.format(started));
      cs.setString(3, df.format(finished));
      cs.setInt(4, numberOfPasses);
      cs.setString(5,courseId);
      cs.executeQuery();
                 }
        catch (Exception ex)  {
                   ex.printStackTrace();

                       }
        finally
      {
         if(pool!=null)
           pool.release(conn);
      }
   }

   //upisuje podatke o lekciji koju je student zavrsio
  public void writeUnitData(int studId, String concID,String unitID, Date started, Date finished, int numberOfPasses){

    try  {
         pool=ConnectionPool.getConnectionPool();
         conn=pool.getConnection();
         cs = conn.prepareCall(
         "{call spInsertUnitInConceptForStudent(?,?,?,?,?,?)}");
     cs.setInt(1, studId);
     cs.setString(2,concID);
     cs.setString(3,unitID);
     cs.setString(4, df.format(started));
     cs.setString(5, df.format(finished));
     cs.setInt(6, numberOfPasses);
     cs.executeQuery();
                }
       catch (Exception ex)  {
                  ex.printStackTrace();

                      }
       finally
     {
        if(pool!=null)
          pool.release(conn);
     }
  }
  //azurira podatke o lekciji koju je ponovo presao
  public void updateUnitData(int studId, String concID,String unitID, Date started, Date finished, int numberOfP){

    try  {
         pool=ConnectionPool.getConnectionPool();
         conn=pool.getConnection();
         cs = conn.prepareCall(
         "{call spUpdateUnitInConceptForStudent(?,?,?,?,?,?)}");
     cs.setInt(1, studId);
     cs.setString(2,concID);
     cs.setString(3,unitID);
     cs.setString(4, df.format(started));
     cs.setString(5, df.format(finished));
     cs.setInt(6, numberOfP);
     cs.executeQuery();
                }
       catch (Exception ex)  {
                  ex.printStackTrace();

                      }
       finally
     {
        if(pool!=null)
          pool.release(conn);
     }
  }


  //upisuje podatke o lekciji koju je student zavrsio
    public void writeTestData(int studId, String concID,int testID, Date started, Date finished,
                              int numberOfPasses,double degreeOfMast,double knowledgeLev,int duration,
        double testDifficultyFactor, double success, double testPointsNumber){

      try  {
           pool=ConnectionPool.getConnectionPool();
           conn=pool.getConnection();

           cs = conn.prepareCall(
           "{call spInsertTestInConceptForStudent(?,?,?,?,?,?,?,?,?,?,?,?)}");
       cs.setInt(1, studId);
       cs.setString(2,concID);
       cs.setInt(3,testID);
       cs.setString(4, df.format(started));
       cs.setString(5, df.format(finished));
       cs.setInt(6, numberOfPasses);
       cs.setDouble(7,degreeOfMast);
       cs.setDouble(8,knowledgeLev);
       cs.setInt(9,duration);
       cs.setDouble(10,testDifficultyFactor);
       cs.setDouble(11,success);
       cs.setDouble(12,testPointsNumber);
       cs.executeQuery();
                  }
         catch (Exception ex)  {
                    ex.printStackTrace();

                        }
         finally
       {
          if(pool!=null)
            pool.release(conn);
       }
    }
    //upisuje podatke o lekciji koju je student zavrsio
        public void writeQuestionData(int studId, String concID,int testID, String questionId, boolean truth){

        try  {
               pool=ConnectionPool.getConnectionPool();
               conn=pool.getConnection();

               cs = conn.prepareCall(
               "{call spInsertQuestionInTestForStudent(?,?,?,?,?)}");
           cs.setInt(1, studId);
           cs.setString(2,concID);
           cs.setInt(3,testID);
           cs.setString(4,questionId);

           cs.setBoolean(5, truth);


           cs.executeQuery();
                      }
             catch (Exception ex)  {
                        ex.printStackTrace();

                            }
             finally
           {
              if(pool!=null)
                pool.release(conn);
           }
        }

   //upisuje u bazu podataka istoriju rada sistema sa studentom
   public void writeTeachingHistory(){

   }


}
